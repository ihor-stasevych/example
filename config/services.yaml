# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.


    addhash.validator:
          class: App\AddHash\System\GlobalContext\Validation\Validator
          public: true
          arguments: ["@service_container"]
    App\AddHash\System\GlobalContext\Validation\Validator: '@addhash.validator'

    addhash.service_controller:
        abstract: true
        public: false
        class: App\AddHash\System\GlobalContext\Common\BaseServiceController
        calls:
          - [setSerializer, ['@serializer']]
          - [setValidator, ['@addhash.validator']]
    App\AddHash\System\GlobalContext\Common\BaseServiceController: '@addhash.service_controller'


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    #App\:
    #    resource: '../src/*'
    #    exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\AddHash\AdminPanel\Application\Controller\:
        resource: '../src/AddHash/AdminPanel/Application/Controller'
        parent: addhash.service_controller
        autowire: true
        autoconfigure: false
        public: true
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    acme_api.event.jwt_created_listener:
        class: App\AddHash\Authentication\Infrastructure\Events\Jwt\onJWTCreatedEvent
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    ##Authentification
    addhash.user.repository:
      class: App\AddHash\AdminPanel\Infrastructure\Repository\User\UserRepository
      arguments: ['@doctrine.orm.entity_manager']
    App\AddHash\AdminPanel\Infrastructure\Repository\UserRepository: '@addhash.user.repository'

    App\AddHash\AdminPanel\Infrastructure\Repository\UserRepositoryInterface: '@addhash.user.repository'

    ##User Authentication (ADMIN PANEL CONTEXT TEMPORARY)
    addhash.user_authentificator:
      class: App\AddHash\AdminPanel\Infrastructure\Auth\UserAuthenticator
      arguments: ['@addhash.user.repository', '@lexik_jwt_authentication.encoder.lcobucci']
    App\AddHash\AdminPanel\Infrastructure\Auth\UserAuthenticator: '@addhash.user_authentificator'

    ##User Provider2
    addhash.user_provider:
      class: App\AddHash\AdminPanel\Infrastructure\Auth\UserAuthProvider
      arguments: ['@addhash.user.repository']
    App\AddHash\AdminPanel\Infrastructure\Auth\UserAuthProvider: '@addhash.user_provider'

imports:
  - { resource: "../src/AddHash/Resources/config/services.yaml"}